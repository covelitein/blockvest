const mysql = require('mysql2/promise');

function connectMySQL2(config) {
  const connection = mysql.createConnection({
    ...config,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
  });

  connection.connect((error) => {
    if (error) {
      console.log('Database connection error:', error);
    } else {
      console.log('Database connected successfully');
    }
  });

  connection.on('error', (error) => {
    console.log('Database error:', error);
    if (error.code === 'PROTOCOL_CONNECTION_LOST') {
      connectMySQL2();
    }
  });

  return connection;
}

module.exports = connectMySQL2;



const { Pool } = require('pg');

function connectPG(config) {
  const pool = new Pool(config);

  pool.on('connect', () => {
    console.log('Database connected successfully');
  });

  pool.on('error', (error) => {
    console.log('Database error:', error);
  });

  return pool;
}

module.exports = connectPG;





const { MongoClient } = require('mongodb');

function connectMongoDB(config) {
  const client = new MongoClient(config.uri, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });

  client.connect((error) => {
    if (error) {
      console.log('Database connection error:', error);
    } else {
      console.log('Database connected successfully');
    }
  });

  client.on('error', (error) => {
    console.log('Database error:', error);
  });

  return client;
}

module.exports = connectMongoDB;


const Sequelize = require('sequelize');

// Create a new Sequelize instance
const sequelize = new Sequelize('mydatabase', 'myusername', 'mypassword', {
  host: 'localhost',
  dialect: 'mysql'
});

// Define the User model
const User = sequelize.define('User', {
  name: {
    type: Sequelize.STRING,
    allowNull: false
  },
  email: {
    type: Sequelize.STRING,
    allowNull: false,
    unique: true
  },
  password: {
    type: Sequelize.STRING,
    allowNull: false
  }
});

module.exports = { User };


const express = require('express');
const bodyParser = require('body-parser');
const app = express();

app.use(bodyParser.urlencoded({ extended: true }));

// Import the Sequelize models
const { User } = require('./models');

// Define a route for creating a new user
app.post('/users', async (req, res) => {
  try {
    // Create a new user with the submitted form data
    const user = await User.create({
      name: req.body.name,
      email: req.body.email,
      password: req.body.password
    });

    // Send a response back to the client with the created user data
    res.status(201).json(user);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
});

// Start the server
app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});



const { Op } = require('sequelize');

const users = await User.findAll({
  where: {
    [Op.and]: [
      { age: { [Op.gt]: 18 } },
      Sequelize.where(
        Sequelize.fn('LOWER', Sequelize.col('name')),
        'LIKE',
        '%john%'
      )
    ]
  },
  include: [Post]
});


const { Sequelize, Model, DataTypes } = require('sequelize');
const sequelize = new Sequelize('database', 'username', 'password', {
  host: 'localhost',
  dialect: 'mysql'
});

class User extends Model {}
User.init({
  name: DataTypes.STRING,
  email: DataTypes.STRING,
  age: DataTypes.INTEGER
}, { sequelize, modelName: 'user' });

class Post extends Model {}
Post.init({
  title: DataTypes.STRING,
  content: DataTypes.TEXT
}, { sequelize, modelName: 'post' });

// Define associations between models
User.hasMany(Post);
Post.belongsTo(User);



const MongoClient = require('mongodb').MongoClient;

const url = 'mongodb://localhost:27017';
const client = new MongoClient(url);

// CREATE operation
app.post('/contacts', async (req, res) => {
  const { name, phone } = req.body;
  try {
    await client.connect();
    const db = client.db('phonebook');
    const collection = db.collection('contacts');
    await collection.insertOne({ name, phone });
    res.send('Contact added successfully');
  } catch (error) {
    console.error(error);
    res.status(500).send('Error adding contact');
  } finally {
    await client.close();
  }
});

// READ operation
app.get('/contacts', async (req, res) => {
  try {
    await client.connect();
    const db = client.db('phonebook');
    const collection = db.collection('contacts');
    const contacts = await collection.find({}).toArray();
    res.json(contacts);
  } catch (error) {
    console.error(error);
    res.status(500).send('Error retrieving contacts');
  } finally {
    await client.close();
  }
});

// UPDATE operation
app.put('/contacts/:id', async (req, res) => {
  const id = req.params.id;
  const { name, phone } = req.body;
  try {
    await client.connect();
    const db = client.db('phonebook');
    const collection = db.collection('contacts');
    await collection.updateOne({ _id: id }, { $



const { Pool } = require('pg');

const pool = new Pool({
  user: 'postgres',
  host: 'localhost',
  database: 'phonebook',
  password: 'mypassword',
  port: 5432,
});

// CREATE operation
app.post('/contacts', async (req, res) => {
  const { name, phone } = req.body;
  const query = 'INSERT INTO contacts (name, phone) VALUES ($1, $2)';
  try {
    await pool.query(query, [name, phone]);
    res.send('Contact added successfully');
  } catch (error) {
    console.error(error);
    res.status(500).send('Error adding contact');
  }
});

// READ operation
app.get('/contacts', async (req, res) => {
  const query = 'SELECT * FROM contacts';
  try {
    const { rows } = await pool.query(query);
    res.json(rows);
  } catch (error) {
    console.error(error);
    res.status(500).send('Error retrieving contacts');
  }
});

// UPDATE operation
app.put('/contacts/:id', async (req, res) => {
  const id = req.params.id;
  const { name, phone } = req.body;
  const query = 'UPDATE contacts SET name = $1, phone = $2 WHERE id = $3';
  try {
    await pool.query(query, [name, phone, id]);
    res.send('Contact updated successfully');
  } catch (error) {
    console.error(error);
    res.status(500).send('Error updating contact');
  }
});

// DELETE operation
app.delete('/contacts/:id', async (req, res) => {
  const id = req.params.id;
  const query = 'DELETE FROM contacts WHERE id = $1';
  try {
    await pool.query(query, [id]);
    res.send('Contact deleted successfully');
  } catch (error) {
    console.error(error);
    res.status(500).send('Error deleting contact');
  }
});





const Sequelize = require('sequelize');

const sequelize = new Sequelize('phonebook', 'root', '', {
  host: 'localhost',
  dialect: 'mysql'
});

module.exports = sequelize;


const { DataTypes } = require('sequelize');
const sequelize = require('../db');

const User = sequelize.define('User', {
  firstName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  lastName: {
    type: DataTypes.STRING,
    allowNull: false
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false
  }
});

module.exports = User;


const User = require('../models/user');

router.post('/users', async (req, res) => {
  try {
    const { firstName, lastName, email, password } = req.body;
    const user = await User.create({
      firstName,
      lastName,
      email,
      password
    });
    res.status(201).json(user);
  } catch (error) {
    console.error(error);
    res.status(500).send('Server Error');
  }
});


const updateUser = async (req, res) => {
  const { id } = req.params;
  const { name, email } = req.body;

  try {
    const user = await User.update(
      { name, email },
      { where: { id } }
    );

    res.status(200).json({
      message: 'User updated successfully',
      user,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: 'Server Error' });
  }
};


const deleteUser = async (req, res) => {
  const { id } = req.params;

  try {
    const user = await User.destroy({ where: { id } });

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.status(200).json({ message: 'User deleted successfully' });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: 'Server Error' });
  }
};


const getAllUsers = async (req, res) => {
  try {
    const users = await User.findAll();

    res.status(200).json({
      message: 'Users retrieved successfully',
      users,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: 'Server Error' });
  }
};


const getUserById = async (req, res) => {
  const { id } = req.params;

  try {
    const user = await User.findByPk(id);

    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }

    res.status(200).json({
      message: 'User retrieved successfully',
      user,
    });
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: 'Server Error' });
  }
};


import mysql from 'mysql'

const connect = () => {
  const connection = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'blockvest',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
  });

  connection.connect((error) => {
    if (error) {
      console.log('Database connection error:', error);
    } else {
      console.log('Database connected successfully');
    }
  });

  connection.on('error', (error) => {
    console.log('Database error:', error);
    if (error.code === 'PROTOCOL_CONNECTION_LOST') {
      connect();
    }
  });

  return connection;
};

module.exports = connect;



const express = require('express');
const fileUpload = require('express-fileupload');
const { v4: uuidv4 } = require('uuid');
const fs = require('fs');
const path = require('path');
const app = express();

app.use(fileUpload());

// Handle file upload
app.post('/upload', (req, res) => {
  if (req.files && req.files.file) {
    const file = req.files.file;
    const uniqueName = uuidv4();
    const fileName = file.name;
    const fileExt = path.extname(fileName);
    const newFileName = `${uniqueName}${fileExt}`;

    // Process the file and extract the first name
    const firstName = fileName.split('.')[0];

    // Save the file to a database
    // Database logic goes here

    // Save the file to a folder
    file.mv(path.join(__dirname, 'uploads', newFileName), (err) => {
      if (err) {
        console.error(err);
        res.status(500).send('Error occurred while saving the file');
      } else {
        res.send('File uploaded successfully');
      }
    });
  } else {
    res.status(400).send('No file uploaded');
  }
});

app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});


app.listen(1337);
Well, app.listen is just a shortcut for:
var express = require('express');
var app = express();
var http = require('http');
http.createServer(app).listen(1337);

// Generate an access token with a shorter expiration time
  const accessToken = jwt.sign({ username }, 'your_access_token_secret', { expiresIn: '1h' });

  // Generate a refresh token with a longer expiration time
  const refreshToken = jwt.sign({ username }, 'your_refresh_token_secret', { expiresIn: '7d' });

  res.json({ accessToken, refreshToken });



  import React from 'react';
import { Route, Redirect } from 'react-router-dom';

const ProtectedRoute = ({ component: Component, isAuthenticated, ...rest }) => {
  return (
    <Route
      {...rest}
      render={(props) =>
        isAuthenticated ? <Component {...props} /> : <Redirect to="/login" />
      }
    />
  );
};

export default ProtectedRoute;


import React from 'react';
import { BrowserRouter as Router, Switch } from 'react-router-dom';
import ProtectedRoute from './ProtectedRoute';
import Dashboard from './Dashboard';
import Login from './Login';

const App = () => {
  // Check if the user is authenticated (e.g., by checking the presence of a valid token)
  const isAuthenticated = localStorage.getItem('token') !== null;

  return (
    <Router>
      <Switch>
        <Route path="/login" component={Login} />
        <ProtectedRoute
          path="/dashboard"
          component={Dashboard}
          isAuthenticated={isAuthenticated}
        />
        {/* Other routes */}
      </Switch>
    </Router>
  );
};

export default App;

import React from 'react';
import { Route, Redirect } from 'react-router-dom';

const ProtectedRoute = ({ component: Component, ...rest }) => {
  const isAuthenticated = localStorage.getItem('token'); // Retrieve the token from storage

  return (
    <Route
      {...rest}
      render={(props) =>
        isAuthenticated ? (
          <Component {...props} />
        ) : (
          <Redirect to="/login" />
        )
      }
    />
  );
};

export default ProtectedRoute;



const instance = axios.create({
  baseURL: 'https://your-base-url.com',
});

instance.interceptors.request.use(async (config) => {
  const token = await axios.get('/getAccessToken');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

instance.get('/accessProtectedRoute')
  .then((response) => {
    console.log(response.data);
  })
  .catch((error) => {
    console.log(error);
  });

  const jwt = require('jsonwebtoken');

function checkToken(req, res, next) {
  const token = req.headers.authorization.split(' ')[1];
  jwt.verify(token, 'secret', (err, decoded) => {
    if (err) {
      if (err.name === 'TokenExpiredError') {
        const newToken = jwt.sign({ username: decoded.username }, 'secret', { expiresIn: '1h' });
        req.headers.authorization = `Bearer ${newToken}`;
        next();
      } else {
        return res.status(401).json({ message: 'Invalid token' });
      }
    } else {
      next();
    }
  });
}

module.exports = checkToken;
